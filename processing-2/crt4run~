#!/bin/sh
echo
echo 'Script for creating run.sh (Version-2.1//May/10/2020)'
echo '(1.Include crt4run_shf90 program; 2.Include xyz2fdff90 for TranSIESTA)'
    echo
    echo 'Please choose the type of aprun for run.sh'
    echo '(1) SIESTA and TranSIESTA;'
    echo '(2) TBTrans (Individually);'
    echo '(3) LAMMPS;'
    echo '(4) SIESTA with / without strain (Individually);'
    echo '(5) TranSIESTA (Individually);'
    echo '(6) Denchar;'
    echo '(7) VASP for GPU;'
    echo '(Q) "Quit";'
    while true; do
      read -p '==> ' -e chs_type
      history -s "$chs_type" 2>/dev/null
      case $chs_type in
        1)
          echo
          echo 'You choose (1) SIESTA and TranSIESTA;'
          break 1
          ;;
        2)
          echo
          echo 'You choose (2) TBTrans (Individually);'
          break 1
          ;;
        3)
          echo
          echo 'You choose (3) LAMMPS;'
          break 1
          ;;
        4)
          echo
          echo 'You choose (4) SIESTA with / without strain (Individually);'
          break 1
          ;;
        5)
          echo
          echo 'You choose(5) TranSIESTA (Individually);'
          break 1
          ;;
        6)
          echo
          echo 'You choose(6) Denchar;'
          break 1
          ;;
        7)
          echo
          echo 'You choose(7) VASP for GPU;'
          break 1
          ;;
        [Qq]*)
          echo
          echo 'You chosse "Quit", bye!'
          echo
          exit
          ;;
        *)
          echo
          echo 'Please choose the type of aprun for run.sh'
          echo '(1) SIESTA and TranSIESTA;'
          echo '(2) TBTrans (Individually);'
          echo '(3) LAMMPS;'
          echo '(4) SIESTA with / without strain (Individually);'
          echo '(5) TranSIESTA (Individually);'
          echo '(6) Denchar;'
          echo '(7) VASP for GPU;'
          echo '(Q) "Quit";'
      esac
    done

######################################## (1) SIESTA and TranSIESTA ################################
# filename is without extension only have the name
	# no more use # filename_1="${filename1//.fdf}" # delet .fdf
if [[ $chs_type -eq 1 ]]; then
#-------------------------------------------------------------------
echo
echo 'Checking .fdf file...'
nu_fil2=`ls -f *.fdf 2>/dev/null | wc -l` #hide the error of no .car file

	if [[ $nu_fil2 -eq 0 ]]; then
	echo
	echo "There is no .fdf file, please check again and go to create one, bye..."
	echo
	exit

	elif [[ $nu_fil2 -eq 1 ]]; then
	echo
	echo "You have only one .fdf file"
	echo 
	ls *.fdf
	echo
	echo "Do you want to use it for creating run.sh? (Y for Yes, N for No)"
	while true; do
	read choose3
	case $choose3 in
	[Nn]*)
	echo
	echo "See you then, bye..."
	echo
	exit
	;;
	[Yy]*)
	filename1=*.fdf
	crt4run_shf90 $filename1
	echo
	echo "Run crt4run_shf90 for creating run.sh by "$filename1
	echo
	break 1
	;;
	*)
	echo
	echo "Please choose Y for Yes, N for No"
	esac
	done

	elif [[ $nu_fil2 -gt 1 ]]; then
#-------------------------------------------------------------------

        # ----------------- first .fdf file
	echo
  echo '################ WARNING ################'
  echo 'x axis should be all the same coordinates this time.'
  echo 'Check again before running!'
	echo
  echo '---------------- Information --------------------'
	echo 'Please choose first .fdf file for creating run.sh'
  echo '(Run SIESTA)'
	echo
	ls -f *.fdf
	echo
	echo "Please input one of above files:"	

	while true; do
	read -e filename1
  if [ -z "$filename1" ]
    # -z can check variable is empty or not, -e can read the same type from command line
  then
	echo
	ls *.fdf
	echo
    echo "Please input the correct existed file"
  else

	if [ ! -f $filename1 ]; then
	echo
	ls *.fdf
	echo
	echo "Please input the correct existed file"
	
	else
	echo
	echo 'You choose the first: '$filename1
	echo
	break 1
	fi
  fi
	done

        # ----------------- second .fdf file
	echo
  echo '---------------- Information --------------------'
	echo 'Please choose second .fdf file for creating run.sh'
  echo '(Run TranSIESTA for electrode)'
	echo
	ls -f *.fdf
	echo
	echo "Please input one of above files:"	

	while true; do
	read -e filename2
  if [ -z "$filename2" ]
    # -z can check variable is empty or not, -e can read the same type from command line
  then
	echo
	ls *.fdf
	echo
    echo "Please input the correct existed file"
  else

	if [ ! -f $filename2 ]; then
	echo
	ls *.fdf
	echo
	echo "Please input the correct existed file"

  elif [ $filename2 = $filename1 ]; then
    echo
    echo '-------------- Warning ----------------'
    echo 'Please do not enter the same input file'
	  echo
	  ls -f *.fdf
	  echo
    echo 'Try again for the second .fdf file'
	
	else
	echo
	echo 'You choose the second: '$filename2
	echo
	break 1
	fi
  fi
	done

        # ----------------- third .fdf file
	echo
  echo '---------------- Information --------------------'
	echo 'Please choose third .fdf file for creating run.sh'
  echo '(Run TranSIESTA for scattering)'
	echo
	ls -f *.fdf
	echo
	echo "Please input one of above files:"	

	while true; do
	read -e filename3
  if [ -z "$filename3" ]
    # -z can check variable is empty or not, -e can read the same type from command line
  then
	echo
	ls *.fdf
	echo
    echo "Please input the correct existed file"
  else

	if [ ! -f $filename3 ]; then
	echo
	ls *.fdf
	echo
	echo "Please input the correct existed file"

  elif [ $filename3 = $filename1 ] || [ $filename3 = $filename2 ]; then
    echo
    echo '-------------- Warning ----------------'
    echo 'Please do not enter the same input file with the first two files'
    echo '('$filename1', '$filename2' already included)'
	  echo
	  ls -f *.fdf
	  echo
    echo 'Try again for the third .fdf file'
	
	else
	echo
	echo 'You choose the third: '$filename3
	echo
	crt4run_shf90 $filename1 $filename2 $filename3
	break 1
	fi
  fi
	done
  fi

############################## (2) TBTrans #################################
  elif [[ $chs_type -eq 2 ]]; then
#-------------------------------------------------------------------

while true; do
  echo
  echo 'Which style you would like to use?'
  echo '(1) by the range of eV'
  echo '(2) by selecting each file'
  echo '(Q) Quit'
  read -p "==>  " -e chs_stl
  history -s "$chs_stl" 2>/dev/null
  case $chs_stl in
    1)
      echo
      echo 'You choose (1)'
      break 1
      ;;
    2)
      echo
      echo 'You choose (2)'
      break 1
      ;;
    [qQ]*)
      echo
      echo 'You choose quit... bye'
      echo
      exit
      ;;
    *)
      echo
      echo 'Error : Please choose (1) or (2) or quit'
  esac
done

if [[ $chs_stl -eq 1 ]]; then
  
  while true; do
    chk_nu='^[+-]?[0-9]+([.][0-9]+)?$'
    echo
    echo 'Please enter the minimum value'
    echo '(min = eV)'
    read -p "==>  " -e chs_min
    history -s "$chs_min" 2>/dev/null
    # minus value has a problem 
    # cannot show up 
    # will be seen as a history argument
    # dev/null for slience error
    # find a new way later
    if [[ ! $chs_min =~ $chk_nu ]] 2>/dev/null; then
      echo
      echo 'Error : Need a number'
    else
      break 1
    fi
  done

  while true; do
    echo
    echo 'Please enter the maximum value'
    echo '(min <= max )'
    read -p "==>  " -e chs_max
    history -s "$chs_max" 2>/dev/null
    if [[ ! $chs_max =~ $chk_nu ]] 2>/dev/null; then
      echo
      echo 'Error : Need a number'
    elif (($(echo "$chs_max < $chs_min" | bc -l))) 2>/dev/null; then
      echo
      echo 'Error : Need min <= max'
      echo 'Minimum : '$chs_min
    else
      break 1
    fi
  done
  #chs_rang=$(($(echo "$chs_max - $chs_min" |bc -l))) 
  #there was an error if use above line
  chs_rang=$(bc <<< "$chs_max - $chs_min")

if (($(echo "$chs_max != $chs_min" | bc -l))) 2>/dev/null; then
  while true; do
    echo
    echo 'Please enter the interval value'
    echo '(0 eV < interval <= '$chs_rang' eV)'
    read -p "==>  " -e chs_intvl
    history -s "$chs_intvl" 2>/dev/null
    if [[ ! $chs_intvl =~ $chk_nu ]] 2>/dev/null; then
      echo
      echo 'Error : Need a number'
    elif (($(echo "$chs_intvl > $chs_rang" | bc -l))) || (($(echo "$chs_intvl <= 0" | bc -l))) 2>/dev/null; then
      echo
      echo 'Error : Need 0 eV < interval <= max'
      echo 'Maximum : '$chs_max
    else
      nu_fil=$(bc <<< "scale=0; $chs_rang/$chs_intvl")
      chk_fil=$(bc <<< "scale=0; $chs_rang%$chs_intvl")
      # need to be improved
      if (($(echo "$chk_fil != 0" |bc -l))); then
        echo
        echo 'Error : Try a value which can divide the range ==> '$(echo "$chs_max - $chs_min" |bc -l)
      else
        break 1
      fi
    fi
  done
else
  chs_intvl=0
  nu_fil=0
fi

  while true; do
    echo
    ls *.fdf
  echo
  read -p "Please select one file as a template of a serie of filenames : " -e filna
  history -s "$filna"
  if [[ ! -f $filna ]]; then
    echo
    echo Error : No exist file, enter again
  else
    if [[ ! $filna == *.fdf ]]; then
      echo
      echo Error : No "*.fdf" file selected, enter again
    elif [[ ! $filna == *"_"* ]]; then
      echo
      echo 'Error : Filename should include "_" as a separate symbol, enter again'
    else
  
      err_fil=0
      coret_fil=0
      flotnu_intvl=${chs_intvl#*.}
      nu_intvl=${#flotnu_intvl}
      ind_filna=$(bc <<< "scale=0; $chs_min" | awk -v nu_intvl="$nu_intvl" '{printf "%.*f", nu_intvl, $0}')
      for (( i=0; i<=$nu_fil; i++))
      do
          tmp_filna=${filna%_*}
          filna=$tmp_filna'_'$ind_filna'v.fdf'
        if [[ -f $filna ]]; then
          fil_array=("${fil_array[@]}" $filna)
          coret_fil=$((coret_fil+1))
        else
          echo
          echo 'Error : File '$filna' not exist'
          echo '      : Check it later manually'
          err_fil=$((err_fil+1))
        fi
          ind_filna=$(bc <<< "scale=0; $ind_filna + $chs_intvl" | awk -v nu_intvl="$nu_intvl" '{printf "%.*f", nu_intvl, $0}')
      done
      break 1
    fi
  fi
  done
  echo
  echo '----------------------------------------------------------------------------'
  echo
  echo 'Assumed total files : '$((nu_fil+1))
  if [[ ${#fil_array[@]} -eq 0 ]]; then
    echo
    echo 'Error : No file selected'
    echo
    exit
  elif [[ $err_fil -ne 0 ]]; then
    echo
    echo 'Warning : Selected files not equal to assumed files'
    echo 'Selected files : '$coret_fil
    echo
    echo 'You selected : '${fil_array[@]}
    while true; do
      echo
      echo 'Are you sure to continue? (Y/N)'
      read -p "==>  " -e chs_yn
      history -s "$chs_yn"
      case $chs_yn in
        [yY]*)
          echo
          echo '----------------------------------------------------------------------------'
          break 1
          ;;
        [nN]*)
          echo
          echo 'You choose quit... bye'
          echo
          exit
          ;;
        *)
      esac
    done
  else
    echo
    echo 'Selected files : '$coret_fil
    echo
    echo 'You selected : '${fil_array[@]}
    echo
    echo '----------------------------------------------------------------------------'
  fi
  crt4run_shf90 $chs_type ${fil_array[@]}

  ############### select each files ##################
  elif [[ $chs_stl -eq 2 ]]; then

while true; do
  echo
  ls *.fdf
echo
read -p "How many files: " nu_fil
if [[ $nu_fil -le 0 ]]; then
  echo
  echo Error : at least 1 file needs to be run
  echo Enter again
else
  i=1
  break 1
fi
done

while true; do
  echo
  ls *.fdf
echo
read -p "Filename: " -e filna
history -s "$filna"
if [[ ! -f $filna ]]; then
  echo
  echo Error: no exist file, enter again
else
  if [[ ! $filna == *.fdf ]]; then
    echo
    echo Error: no "*.fdf" file selected, enter again
  else
  fil_array=("${fil_array[@]}" $filna)
  if [[ $i -eq $nu_fil ]]; then
    break 1
  else
  i=$(($i+1))
  fi
  fi
fi
done
crt4run_shf90 $chs_type ${fil_array[@]}
fi

############################## (3) LAMMPS #################################
  elif [[ $chs_type -eq 3 ]]; then
#-------------------------------------------------------------------
echo
echo 'Checking in.* file...'
nu_fil2=`ls -f in.* 2>/dev/null | wc -l` #hide the error of no .car file

	if [[ $nu_fil2 -eq 0 ]]; then
	echo
	echo "There is no in.* file, please check again and go to create one, bye..."
	echo
	exit

	elif [[ $nu_fil2 -eq 1 ]]; then
	echo
	echo "You have only one in.* file"
	echo 
	ls in.*
	echo
	echo "Do you want to use it for creating run.sh? (Y for Yes, N for No)"
	while true; do
    choose3=y
	###### read choose3
	case $choose3 in
	[Nn]*)
	echo
	echo "See you then, bye..."
	echo
	exit
	;;
	[Yy]*)
	filename1=in.*
	echo
	echo "Run crt4run_shf90 for creating run.sh by "$filename1
	echo
	crt4run_shf90 $filename1 && qsub run.sh && qstat -u boom9000
	echo
	break 1
	;;
	*)
	echo
	echo "Please choose Y for Yes, N for No"
	esac
	done

	elif [[ $nu_fil2 -gt 1 ]]; then
#-------------------------------------------------------------------
	echo
	echo 'Please choose one in.* file for creating run.sh'
	echo
	ls -f in.*
	echo
	echo "Please input one of above files:"	
  ###### ------ quick CH lammps run only in.min file is used

	while true; do
    filename1=in.min
	###### read -e filename1
  if [ -z "$filename1" ]
    # -z can check variable is empty or not, -e can read the same type from command line
  then
	echo
	ls in.*
	echo
  echo "Please input the correct existed file"
  else

	if [ ! -f $filename1 ]; then
	echo
	ls in.*
	echo
	echo "Please input the correct existed file"
	
	else
	echo
	echo 'You choose: '$filename1
	echo
	crt4run_shf90 $filename1 && qsub run.sh && qstat -u boom9000
  echo
	break 1
	fi
  fi
	done
  fi

######################################## (4) SIESTA ################################
# filename is without extension only have the name
	# no more use # filename_1="${filename1//.fdf}" # delet .fdf
  elif [[ $chs_type -eq 4 ]]; then
#-------------------------------------------------------------------
echo
echo 'Checking *.fdf file... as template here'
nu_fil2=`ls -f *.fdf 2>/dev/null | wc -l` #hide the error of no .car file

	if [[ $nu_fil2 -eq 0 ]]; then
	echo
	echo "There is no .fdf file, please check again and go to create one, bye..."
	echo
	exit

	elif [[ $nu_fil2 -eq 1 ]]; then
	echo
	echo "You have only one .fdf file"
	echo 
	ls *.fdf
	echo
	echo "Do you want to use it for creating run.sh? (Y for Yes, N for No)"
	while true; do
	read choose3
	case $choose3 in
	[Nn]*)
	echo
	echo "See you then, bye..."
	echo
	exit
	;;
	[Yy]*)
	filename1=*.fdf
	crt4run_shf90 $filename1
	echo
	echo "Run crt4run_shf90 for creating run.sh by "$filename1
	echo
	break 1
	;;
	*)
	echo
	echo "Please choose Y for Yes, N for No"
	esac
	done

	elif [[ $nu_fil2 -gt 1 ]]; then
#-------------------------------------------------------------------

	echo
	echo 'Please choose one .fdf file for creating run.sh'
	echo
	ls -f *.fdf
	echo
	echo "Please input one of above files:"	

	while true; do
	read -e filename1
  if [ -z "$filename1" ]
    # -z can check variable is empty or not, -e can read the same type from command line
  then
	echo
	ls *.fdf
	echo
    echo "Please input the correct existed file"
  else

	if [ ! -f $filename1 ]; then
	echo
	ls *.fdf
	echo
	echo "Please input the correct existed file"
	
	else
	echo
	echo 'You choose: '$filename1
	echo
	crt4run_shf90 $filename1
	break 1
	fi
  fi
	done
  fi
  
############################## (5) tranSIESTA #################################
  elif [[ $chs_type -eq 5 ]]; then
#-------------------------------------------------------------------
echo
echo 'Checking .fdf file...'
nu_fil2=`ls -f *.fdf 2>/dev/null | wc -l` #hide the error of no .car file

	if [[ $nu_fil2 -eq 0 ]]; then
	echo
	echo "There is no .fdf file, please check again and go to create one, bye..."
	echo
	exit

	elif [[ $nu_fil2 -eq 1 ]]; then
	echo
	echo "You have only one .fdf file"
	echo 
	ls *.fdf
	echo
	echo "Do you want to use it for creating run.sh? (Y for Yes, N for No)"
	while true; do
	read choose3
	case $choose3 in
	[Nn]*)
	echo
	echo "See you then, bye..."
	echo
	exit
	;;
	[Yy]*)
	filename1=*.fdf
	crt4run_shf90 $filename1
	echo
	echo "Run crt4run_shf90 for creating run.sh by "$filename1
	echo
	break 1
	;;
	*)
	echo
	echo "Please choose Y for Yes, N for No"
	esac
	done

	elif [[ $nu_fil2 -gt 1 ]]; then
#-------------------------------------------------------------------

	echo
  echo '################ WARNING ################'
  echo This is only for TranSIESTA run.
  echo Only scatting file will be calculated.

        # ------ 1st and 2nd file are the same scattering file 
        # ------ for recognize siesta or transiesta
	echo
  echo '---------------- Information --------------------'
	echo 'Please choose "tss***.fdf" input file for creating run.sh'
  echo '(Run TranSIESTA for scattering)'
	echo
	ls -f *.fdf
	echo
	echo "Please input one of above files:"	

	while true; do
	read -e filename1
  if [ -z "$filename1" ]
    # -z can check variable is empty or not, -e can read the same type from command line
  then
	echo
	ls *.fdf
	echo
    echo "Please input the correct existed file"
  else

	if [ ! -f $filename1 ]; then
	echo
	ls *.fdf
	echo
	echo "Please input the correct existed file"

	else
	echo
	echo 'You choose the input file: '$filename1
	echo
  filename2=$filename1
	crt4run_shf90 $filename1 $filename2
	break 1
	fi
  fi
	done
  fi

############################## (6) denchar #################################
  elif [[ $chs_type -eq 6 ]]; then
#-------------------------------------------------------------------
echo
echo 'Checking denchar.fdf file...'
nu_fil2=`ls -f denchar.fdf 2>/dev/null | wc -l` #hide the error of no .car file

	if [[ $nu_fil2 -eq 0 ]]; then
	echo
	echo "There is no denchar.fdf file, please check again and go to create one, bye..."
	echo
	exit

	elif [[ $nu_fil2 -eq 1 ]]; then
	echo
	echo "You have denchar.fdf file"
	echo 
	ls denchar.fdf
	echo
	echo "Do you want to use it for creating run.sh? (Y for Yes, N for No)"
	while true; do
    read -p '==>  ' -e choose3
    history -s "$choose3"
	case $choose3 in
	[Nn]*)
	echo
	echo "See you then, bye..."
	echo
	exit
	;;
	[Yy]*)
	filename1=denchar.fdf
	echo
	echo "Run crt4run_shf90 for creating run.sh by "$filename1
	echo
	crt4run_shf90 $chs_type $filename1 && qsub run.sh && qstat -u boom9000
	echo
	break 1
	;;
	*)
	echo
	echo "Please choose Y for Yes, N for No"
	esac
	done

  fi

############################## (7) vasp for gpu#################################
  elif [[ $chs_type -eq 7 ]]; then
#-------------------------------------------------------------------
echo
echo 'Checking ./strain_* directories ...'
nu_dir=`ls -d ./strain_*/ 2>/dev/null | wc -l` #hide the error of no .car file

	if [[ $nu_dir -eq 0 ]]; then
	echo
	echo "There is no strain_* directories, can't create run files for VASP-GPU, bye..."
	echo
	exit

	elif [[ $nu_dir -gt 0 ]]; then
	echo
	echo "You have ./strain_* directories"
	echo 
	ls -d ./strain_*/
	echo
	echo "Do you want to use it for creating run.sh? (Y for Yes, N for No)"
	while true; do
    read -p '==>  ' -e choose3
    history -s "$choose3"
	case $choose3 in
	[Nn]*)
	echo
	echo "See you then, bye..."
	echo
	exit
	;;
	[Yy]*)
	echo
	echo "Run crt4run_shf90 to create run_vasp_gpu_*.sh"
	echo
	crt4run_shf90 $chs_type
	echo
	break 1
	;;
	*)
	echo
	echo "Please choose Y for Yes, N for No"
	esac
	done

  fi

fi
