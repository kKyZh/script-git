      module m_writefilecheck

        private
        public writefilecheck

        contains

        subroutine writefilecheck( &
            filename, fileindex, &
            filewrite, fileindexout )

        use m_fdf2xyz_print

        implicit none

        integer L_C ! length of filename
        integer L_C_2 ! length of filewrite
        integer, intent(in) :: fileindex
        integer, intent(out) :: fileindexout
        character(*), intent(in) :: filename
        character(:), allocatable, intent(out) :: filewrite

        fileindexout = fileindex + 100

        L_C = len_trim(filename)
        L_C_2 = len_trim(filewrite) + 2

        allocate(character(len=L_C_2) :: filewrite)

        filewrite = 'x_'//filename(1:L_C-4)//'.xyz'

        open(fileindexout, form= 'formatted', err=999, &
          file= filewrite, &
          status= 'unknown', access= 'sequential' )

        write(*,*)trim(filewrite), filewrite

        goto 9999

999   continue
        call fdf2xyz_print( &
          "File can not be opened and written" )
9999  continue
        
        endsubroutine writefilecheck

      endmodule 
